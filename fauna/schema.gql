type Query {
  user: User @resolver(name: "current_user") @relation
  campaigns: [Campaign] @relation
}

type Mutation {
  login(email: String!, password: String!): Auth @resolver(name: "user_login")
  createUser(email: String!, password: String!): User
    @resolver(name: "create_user")
}

type Auth @embedded {
  secret: String!
}

type Media @embedded {
  url: String!
}

type User {
  name: String
  avatar: Media
  email: String! @unique

  # Determine if can create(true) or
  # apply(false) to campaigns
  isBrand: Boolean!

  # User created Campaigns
  campaigns: [Campaign] @relation

  # User applications/requests to
  # join Campaigns
  bookings: [Booking] @relation
}

type Campaign {
  # the brand who created the campaign
  user: User

  name: String
  description: String
  dueDate: Date
  private: Boolean
  budget: Float
  bookings: [Booking] @relation
}

enum BookingState {
  ACCEPTED
  DECLINED
  COMPLETE

  # For when an influencer applies
  # to a campaign
  APPLIED

  # For when an brand requests
  # an influencer onto a campaign
  REQUESTED
}

type Booking {
  campaign: Campaign!
  user: User!
  cost: Float!
  state: BookingState!
}
